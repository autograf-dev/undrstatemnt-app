# Plasmic workflow v4
name: Sync, build and deploy Plasmic app

permissions:
  contents: write
  pull-requests: write

on:
  repository_dispatch:
    types: [plasmic]
  workflow_dispatch:
    inputs:
      publish:
        description: 'Build after sync'
        default: 'true'
        required: false
      scheme:
        description: 'Plasmic scheme (loader|codegen)'
        default: 'loader'
        required: false

jobs:
  job:
    name: Sync, build and deploy
    runs-on: ubuntu-latest
    env:
      # Set to 'true' in repo or workflow vars if you want to use Plasmic Codegen sync; keep 'false' for Loader-only.
      USE_PLASMIC_CODEGEN: 'false'
    steps:
      - id: checkout
        name: Checking out repository...
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0
      - id: node
        name: Setting up Node.js v20.10...
        uses: actions/setup-node@v4
        with:
          node-version: "20.10.0"
      - id: cache
        name: Recovering cache...
        uses: actions/cache@v4
        with:
          key: lock-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          path: node_modules
      - id: init
        name: Initializing Plasmic app...
        uses: plasmicapp/plasmic-action@master
        with:
          run: init
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.event.client_payload.data.branch }}
          directory: .
          project_id: ${{ github.event.client_payload.data.projectId }}
          project_api_token: ${{ github.event.client_payload.data.projectApiToken }}
          platform: ${{ github.event.client_payload.data.platform }}
          language: ${{ github.event.client_payload.data.language }}
          scheme: ${{ github.event.client_payload.data.scheme }}
          title: ${{ github.event.client_payload.data.title }}
          description: ${{ github.event.client_payload.data.description }}
      - id: sync
        name: Syncing Plasmic project (Codegen only)...
        if: ${{ github.event.client_payload.data.scheme == 'codegen' && steps.init.outputs.synced != 'true' && env.USE_PLASMIC_CODEGEN == 'true' }}
        uses: plasmicapp/plasmic-action@master
        with:
          run: sync
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.event.client_payload.data.branch }}
          directory: .
          project_id: ${{ github.event.client_payload.data.projectId }}
          project_api_token: ${{ github.event.client_payload.data.projectApiToken }}
          sync_action: ${{ github.event.client_payload.data.syncAction }}
          title: ${{ github.event.client_payload.data.title }}
          description: ${{ github.event.client_payload.data.description }}
      - id: build
        name: Building Plasmic app...
        if: ${{ github.event.client_payload.data.publish }}
        uses: plasmicapp/plasmic-action@master
        with:
          run: build
          branch: ${{ github.event.client_payload.data.branch }}
          directory: .
          platform: ${{ github.event.client_payload.data.platform }}
      - id: pr
        name: Creating pull request...
        uses: repo-sync/pull-request@v2
        if: ${{ steps.sync.outputs.new_branch }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          source_branch: ${{ steps.sync.outputs.new_branch }}
          destination_branch: ${{ github.event.client_payload.data.branch }}
